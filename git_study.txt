//All operation in cmd line

//config local param
//if you config the param to one machine, when you work on another machine
//you must config the param same to the that you work the machine

git config --global user.name "your_name"
git config --global user.email "your_email"

git config --global push.default simple


//build a repository in the workspace
//for example workspace is f:\hello, come to this dir
git init

//add  all files 最后的“.”符号的意思是“所有文件、文件夹和子文件夹”。假如我们只想要把特定文件添加到源代码控制中去，我们
可以指定它们：
git add .
//add specify file
git add file1 file2 file 3

//commit file
git commit -m "some desprition"

git status

//create branch
git checkout -b branch_name

//check branch
git branch


//merge branch to master
当你对你的新功能满意了的时候，你想要把它加到主干分支上。当你在你的新功能分支上时，你首先需要加载
（stage）并且提交你的文件：
git add .git commit -m "some descprition"
git checkout master   //come back master
git merge branch_name

丢弃分支
相反，如果你打算丢弃你在分支里做的修改，你首先需要加载（stage）你的文件并且在分支里提交：
git add .git commit -m "feature to be discarded"

git checkout master

删除分支
假如修改已经合并了，它只会删除分支。假如分支没有合并，你会得到一个错误信息。删除一个未合并的分支（通
常你不想保留的修改），你需要发送一样的命令附带一个大写D。意思是“强制删除分支，无论如何我不想要它
了。”：
git branch -d branch_name

git branch -D branch_name


回滚到之前的提交状态
在某些时候，你可能想要回到之前的代码版本。首先，你需要找到你想回到哪个版本。要看所有的完成了的提交，
发送：
git log

如果你想回到“adds my new feature”这个提交，简单地用提交的ID做签出（checkout）（我通常只用到ID开头的9个
字符）

commit
ca82a6dff817ec66f44342007202690a93763949Author: your_username your_email@domain.comDate

commit
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: your_username your_email@domain.comDate:

git checkout 085bb3bc

你也可以签出到一个新的分支，像这样：
git checkout -b my_previous_version 085bb3bcb

推送到远程代码库
在第一次你想推送一个本地代码库到远程代码库时，你需要把它添加到你的项目配置里。像这样做

git remote add origin https://your_username@bitbucket.org/your_username/name_of_remote_repository.git

注意这里的“origin”只是一个习惯。它是你的远程代码库的别名，但是你可以用其他任何你喜欢的词。你甚至可以有多个远程代码库，你只需要给它们起不同的别名。
之后，你想要推送你的本地代码库的主干分支到你的远程代码库：
git push origin master

取得远程代码库的一份本地拷贝

如果你还没有一份远程代码库的本地版本（例如，如果你在另一台机器上开始工作，这台机器上还没有用过这个项目），你首先需要拷贝（clone）它。去到你的代码库想要拷贝到的文件夹下，并发送：

git clone https://your_username@bitbucket/your_username/name_of_remote_repository.git

别名

Git允许你为你常用的命令创建快捷方式（别名）。例如，如果你不想每次都输入git commit -m “some comment”，而是输入git c “some comment”，你可以向你的git全局配置里添加一个别名来实现，像这样：



已有的git库中搭建新库，并且将本地的git仓库，上传到远程服务器的git库中，从而开始一个新的项目
首先，在本地新建文件夹abc，进入到abc里面，然后git init。这样就在本地初始化了一个git项目abc。
然后，登录到远程的git服务器上，到gitrepo目录下面，mkdir abc.git。然后进入abc.git目录。git  --bare init。这样就在服务器端建立了一个空的git项目。
之后，在本地，进入到abc目录里面，增加远程仓库。git remote -v 显示项目目前的远程仓库，因为是新建项目，所以结果为空。git remote add origin git://127.0.0.1/abc.git这样就增加了远程仓库abc。
最后，commit提交本地代码，git push origin master这样就把本地的git库上传到了远程git服务器的git库中了



Git本地仓库与Github远程仓库关联

SSH Key的配置：

1.Windows下打开Git Bash，创建SSH Key，按提示输入密码，可以不填密码一路回车

$ ssh-keygen -t rsa -C "注册邮箱"
然后用户主目录/.ssh/下有两个文件，id_rsa是私钥，id_rsa.pub是公钥

 

2.获取key，打开.ssh下的id_rsa.pub文件，里面的内容就是key的内容

$ start ~/.ssh/id_rsa.pub

4.测试ssh key是否成功，使用命令“ssh -T git@github.com”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。

 

远程库与本地库之间的操作：

1.从远程克隆一份到本地可以通过git clone

Git支持HTTPS和SSH协议，SSH速度更快

$ git clone git@github.com:nanfei9330/xx.git
 

2.本地库关联远程库，在本地仓库目录运行命令：

$ git remote add origin git@github.com:nanfei9330/learngit.git
请替换为自己仓库的的SSH



 

3.推送master分支的所有内容

$ git push -u origin master
第一次使用加上了-u参数，是推送内容并关联分支。

推送成功后就可以看到远程和本地的内容一模一样，下次只要本地作了提交，就可以通过命令：

$ git push origin master
把最新内容推送到Github

 

=================实战一下吧======================

本地创建文本test.txt，运行:

$ git add text.txt
$ git commit -m"添加新文件"
$ git push origin master
然后就可以在github看到同步了

其他：

取回远程主机某个分支的更新，如

$ git pull origin master







